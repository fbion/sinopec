<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sensenets.sinopec.buiness.dao.two.VehiclesMapper">
    <resultMap id="BaseResultMap" type="com.sensenets.sinopec.buiness.model.two.Vehicles">
        <result column="id" jdbcType="BIGINT" property="id" />
        <result column="uts" jdbcType="TIMESTAMP" property="uts" />
        <result column="vehicle_id" jdbcType="VARCHAR" property="vehicleId" />
        <result column="image_id" jdbcType="VARCHAR" property="imageId" />
        <result column="ts" jdbcType="BIGINT" property="ts" />
        <result column="repo_id" jdbcType="VARCHAR" property="repoId" />
        <result column="sensor_id" jdbcType="VARCHAR" property="sensorId" />
        <result column="confidence" jdbcType="REAL" property="confidence" />
        <result column="brand_id" jdbcType="SMALLINT" property="brandId" />
        <result column="sub_brand_id" jdbcType="SMALLINT" property="subBrandId" />
        <result column="model_year_id" jdbcType="SMALLINT" property="modelYearId" />
        <result column="type_id" jdbcType="SMALLINT" property="typeId" />
        <result column="color_id" jdbcType="SMALLINT" property="colorId" />
        <result column="plate_text" jdbcType="VARCHAR" property="plateText" />
        <result column="plate_type_id" jdbcType="SMALLINT" property="plateTypeId" />
        <result column="plate_color_id" jdbcType="SMALLINT" property="plateColorId" />
        <result column="side" jdbcType="SMALLINT" property="side" />
        <result column="size" jdbcType="SMALLINT" property="size" />
        <result column="speed" jdbcType="SMALLINT" property="speed" />
        <result column="direction" jdbcType="SMALLINT" property="direction" />
        <result column="symbol_int" jdbcType="BIGINT" property="symbolInt" />
        <result column="symbol_str" jdbcType="VARCHAR" property="symbolStr" />
        <result column="illegal_int" jdbcType="BIGINT" property="illegalInt" />
        <result column="illegal_str" jdbcType="VARCHAR" property="illegalStr" />
        <result column="coillegal_int" jdbcType="BIGINT" property="coillegalInt" />
        <result column="coillegal_str" jdbcType="VARCHAR" property="coillegalStr" />
        <result column="special_int" jdbcType="BIGINT" property="specialInt" />
        <result column="special_str" jdbcType="VARCHAR" property="specialStr" />
        <result column="driver_on_the_phone" jdbcType="BIT" property="driverOnThePhone" />
        <result column="driver_without_belt" jdbcType="BIT" property="driverWithoutBelt" />
        <result column="codriver_without_belt" jdbcType="BIT" property="codriverWithoutBelt" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="lane" jdbcType="VARCHAR" property="lane" />
        <result column="face_id" jdbcType="VARCHAR" property="faceId" />
        <result column="oil_type" jdbcType="VARCHAR" property="oilType" />
        <result column="oil_amount" jdbcType="REAL" property="oilAmount" />
        <result column="engine_fuel" jdbcType="SMALLINT" property="engineFuel" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, uts, vehicle_id, image_id, ts, repo_id, sensor_id, confidence, brand_id, sub_brand_id, 
        model_year_id, type_id, color_id, plate_text, plate_type_id, plate_color_id, side, 
        size, speed, direction, symbol_int, symbol_str, illegal_int, illegal_str, coillegal_int, 
        coillegal_str, special_int, special_str, driver_on_the_phone, driver_without_belt, 
        codriver_without_belt, content, lane, face_id, oil_type, oil_amount, engine_fuel
    </sql>
    <select id="selectByExample" parameterType="com.sensenets.sinopec.buiness.model.two.VehiclesCriteria" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from "public"."vehicles"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectVehiclesType" parameterType="com.sensenets.sinopec.buiness.model.two.VehiclesCriteria" resultType="java.lang.Short">
        select
        <if test="distinct">
            distinct
        </if>
        type_id 
        from "public"."vehicles"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="countByExample" parameterType="com.sensenets.sinopec.buiness.model.two.VehiclesCriteria" resultType="java.lang.Integer">
        select count(*) from "public"."vehicles"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

</mapper>